#
# This file is distributed as part of Xilinx ARM SDK
#
# Copyright (c) 2020 - 2021,  Xilinx, Inc.
# All rights reserved.
#
Index: u-boot-lx2162a-bsp0.4-lx2162au26z-minimal/cmd/suc.c
===================================================================
--- u-boot-lx2162a-bsp0.4-lx2162au26z-minimal.orig/cmd/suc.c
+++ u-boot-lx2162a-bsp0.4-lx2162au26z-minimal/cmd/suc.c
@@ -7,14 +7,19 @@
 #include <bootretry.h>
 #include <cli.h>
 #include <command.h>
+#include <stdlib.h>
+#include <version.h>
 #include <console.h>
 #include <dm.h>
 #include <edid.h>
 #include <errno.h>
 #include <i2c.h>
+#include <spi.h>
+#include <spi_flash.h>
 #include <malloc.h>
 #include <asm/byteorder.h>
 #include <linux/compiler.h>
+#include <dm/device-internal.h>
 
 
 #define i2cdev 0
@@ -54,6 +59,8 @@
 #define SUC_SOC_TYPE_OFFSET 0x66
 #define SUC_SOC_DEVID_OFFSET 0x67
 #define SUC_LAST_REBOOT_LSB_OFFSET 0xC
+#define SUC_FW_VERSION_START_OFFSET 0x80
+#define SUC_UBOOT_VERSION_START_OFFSET 0x88
 
 #ifdef CONFIG_DM_I2C
 static struct udevice *i2c_suc_bus;
@@ -348,9 +355,196 @@ static int do_suc_get_ethaddr(cmd_tbl_t
     return 0;
 }
 
+static uint8_t strtouint8(const char *str, size_t len)
+{
+    uint8_t res = 0, i;
+
+    if ((str == NULL) || (len > 3))
+        return 0;
+
+    for (i = 0; i < len; ++i) {
+        res = (res * 10) + (str[i] - '0');
+    }
+
+    return res;
+}
+
+static int suc_update_uboot_version(void)
+{
+    const char version_string[] = U_BOOT_VERSION_STRING;
+    const char *vs;
+    size_t version_loc, version_string_len;
+    uint8_t i = 0, version_val[5];
+    int ret;
+
+    /*
+     * Supplied U-Boot version in string format
+     *
+     * U-BootVersion.U-BootPatchLevel.SDKMajor.SDKMinor.SDKPatch.SDKBuild.SDKDirty
+     *
+     */
+    memset(version_val, 0, sizeof(version_val));
+    version_string_len = strlen(version_string);
+    vs = version_string;
+
+    while (1) {
+        version_loc = strcspn(vs, ".");
+        if (i > 1 && i < 7 && version_loc) {
+            if (i == 6) /* Expect Dirty bit of only 1 byte */
+                version_loc = 1;
+            version_val[i - 2] = strtouint8(vs, version_loc);
+        }
+
+        if (version_loc >= version_string_len) {
+            break;
+        }
+
+        vs = vs + version_loc + 1;
+        version_string_len = version_string_len - (version_loc + 1);
+        ++i;
+    }
+    printf("U-Boot SDK Version : %u.%u.%u.%u%u\n",
+            version_val[0], version_val[1], version_val[2], version_val[4], version_val[3]);
+
+    /* Write LSB for Major, Minor, Patch */
+    for (i = 0; i < 3; ++i) {
+        ret = suc_write(SUC_UBOOT_VERSION_START_OFFSET + (i * 2), &version_val[i], 1);
+        if (ret) {
+            printf("Failed to write uboot version (%d)\n", ret);
+            return ret;
+        }
+    }
+
+    /* Build version = Build at LSB + Dirty flag at MSB */
+    ret = suc_write(SUC_UBOOT_VERSION_START_OFFSET + (i * 2), &version_val[i], 2);
+    if (ret) {
+        printf("Failed to write uboot version (%d)\n", ret);
+        return ret;
+    }
+
+    return 0;
+}
+
+#define VERSION_FLASH_OFFSET    0x1FFC00
+static int suc_update_fw_version(void)
+{
+    struct spi_flash *flash;
+    int i, ret;
+    uint8_t version_val[8];
+#ifdef CONFIG_DM_SPI_FLASH
+    struct udevice *new;
+#endif
+
+#ifdef CONFIG_DM_SPI_FLASH
+    ret = spi_flash_probe_bus_cs(CONFIG_SF_DEFAULT_BUS, CONFIG_SF_DEFAULT_CS,
+           CONFIG_SF_DEFAULT_SPEED, CONFIG_SF_DEFAULT_MODE, &new);
+    if (ret) {
+        printf("Failed to initialize SPI flash at %u:%u (error %d)\n",
+                CONFIG_SF_DEFAULT_BUS, CONFIG_SF_DEFAULT_CS, ret);
+        return 1;
+    }
+
+    flash = dev_get_uclass_priv(new);
+#else
+    flash = spi_flash_probe(CONFIG_SF_DEFAULT_BUS, CONFIG_SF_DEFAULT_CS,
+           CONFIG_SF_DEFAULT_SPEED, CONFIG_SF_DEFAULT_MODE);
+#endif
+    if (!flash) {
+        printf("Failed to initialize SPI flash at %u:%u\n", CONFIG_SF_DEFAULT_BUS, CONFIG_SF_DEFAULT_CS);
+        return 1;
+    }
+
+    ret = spi_flash_read(flash, VERSION_FLASH_OFFSET, sizeof(version_val), version_val);
+    if (ret) {
+        printf("Failed to read for fw version from Flash\n");
+        spi_flash_free(flash);
+        return 1;
+    }
+
+    spi_flash_free(flash);
+
+    /*
+     * Supplied FW version format in Flash
+     *
+     * MajorLSB MajorMSB MinorLSB MinorMSB PatchLSB PatchMSB BuildLSB DirtyMSB
+     *
+     */
+    printf("Firmware SDK Version : ");
+    for (i = 0; i < sizeof(version_val) - 2; i += 2) {
+        printf("%u.", (uint16_t )version_val[i]);
+    }
+    /* Print Dirty Bit + Build version */
+    printf("%u%u\n", version_val[i+1], version_val[i]);
+
+    ret = suc_write(SUC_FW_VERSION_START_OFFSET, version_val, sizeof(version_val));
+    if (ret) {
+        printf("Failed to write fw version (%d)\n", ret);
+        return ret;
+    }
+
+    return 0;
+}
+
+static int do_suc_update_version(cmd_tbl_t *cmdtp, int flag, int argc,
+		                char * const argv[])
+{
+	int ret;
+	uint8_t value;
+
+#ifdef CONFIG_DM_I2C
+	ret = uclass_get_device_by_seq(UCLASS_I2C, i2cdev, &i2c_suc_bus);
+#else
+	ret = i2c_set_bus_num(i2cdev);
+#endif
+	if (ret) {
+		printf("Failure changing bus number (%d)\n", ret);
+		return -ENODEV;
+	}
+
+	/* Verify device ID and Version */
+	ret = suc_read(SUC_DEVID_OFFSET, &value, 1);
+	if (ret) {
+		printf("Failure reading suc device ID (%d)\n", ret);
+		return ret;
+	}
+
+	if(value != SUC_DEVICE_ID) {
+		printf("suc device ID Mismatch(%d:%d)\n", value, SUC_DEVICE_ID);
+		return ret;
+	}
+
+	ret = suc_read(SUC_DEVVERSION_OFFSET, &value, 1);
+	if (ret) {
+		printf("Failure reading suc Version (%d)\n", ret);
+		return ret;
+	}
+
+	if(value != SUC_DEVICE_VERSION) {
+		printf("suc device version Mismatch(%d:%d)\n", value, SUC_DEVICE_VERSION);
+		return ret;
+	}
+
+	/* Update Firmware version */
+	ret = suc_update_fw_version();
+	if (ret) {
+		printf("Failed to update firmware version to SUC (%d)\n", ret);
+		return ret;
+	}
+
+	/* Read U Boot version */
+	ret = suc_update_uboot_version();
+	if (ret) {
+		printf("Failed to update u-boot version to SUC (%d)\n", ret);
+		return ret;
+	}
+
+	return 0;
+}
+
 static cmd_tbl_t cmd_suc_sub[] = {
     U_BOOT_CMD_MKENT(check_maint, 0, 1, do_suc_check_maint, "", ""),
     U_BOOT_CMD_MKENT(get_ethaddr, 0, 1, do_suc_get_ethaddr, "", ""),
+    U_BOOT_CMD_MKENT(update_version, 0, 0, do_suc_update_version, "Update SOC version with SUC", ""),
 };
 
 /**
@@ -384,8 +578,9 @@ static int do_suc(cmd_tbl_t * cmdtp, int
 /***************************************************/
 #ifdef CONFIG_SYS_LONGHELP
 static char suc_help_text[] =
-	"check_maint [MAX_COUNTER] [MAX_TIMER] check if recovery is required\n"
-    	"suc get_ethaddr";
+    "check_maint [MAX_COUNTER] [MAX_TIMER] check if recovery is required\n"
+    "suc get_ethaddr\n"
+    "suc update_version";
 #endif
 U_BOOT_CMD(
 	suc, 4, 1, do_suc,
